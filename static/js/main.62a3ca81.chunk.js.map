{"version":3,"sources":["components/Navigation.tsx","components/Footer.tsx","components/TestnetWarningBanner.tsx","assets/images/Game.png","pages/Home.tsx","components/wallet/connectors.tsx","components/BurnTokens.tsx","components/EGGSBurnLeaderboard.tsx","components/TotalBurnedTokens.tsx","pages/Games.tsx","pages/Spacebots.tsx","components/SoonabotRacing.tsx","pages/Soonabots.tsx","pages/Profile.tsx","pages/Info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PrimarySearchAppBar","React","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleMobileMenuClose","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","mobileMenuId","renderMobileMenu","style","color","isActive","to","IconButton","target","href","size","aria-label","Badge","badgeContent","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","noWrap","component","display","xs","sm","className","md","aria-controls","aria-haspopup","event","currentTarget","Album","Copyright","align","Link","Date","getFullYear","bgcolor","p","gutterBottom","TestnetWarningBanner","Alert","severity","AlertTitle","textDecoration","Home","CssBaseline","pt","pb","Container","maxWidth","paragraph","Stack","direction","spacing","justifyContent","py","Grid","container","item","Card","height","flexDirection","CardMedia","maxHeight","minHeight","padding","image","alt","CardContent","spacebots_img","injected","InjectedConnector","supportedChainIds","BurnTokens","_provider","contractAddress","tokenContractAddress","library","useWeb3React","useState","amount","setAmount","status","setStatus","burnTokens","a","provider","ethers","providers","Web3Provider","currentProvider","utils","isAddress","signer","getSigner","contract","Contract","abi","parseUnits","tx","wait","message","approveContract","amountToApprove","token","TOKEN","approve","type","value","onChange","e","placeholder","Leaderboard","top","leaderboard","setLeaderboard","useEffect","getTopBurners","topBurners","Promise","all","map","burner","burnedTokens","burnedAmount","address","formatUnits","burnersData","console","error","fetchLeaderboard","shortenAddress","slice","AddressWithTooltip","cursor","title","width","minWidth","index","TotalBurnedTokens","tokenAddress","totalBurnedTokens","setTotalBurnedTokens","tokenContract","balanceOf","fetchTotalBurnedTokens","iotabotsContractAddress","gameContractAddress","burnTokenContractAddress","Games","active","account","activate","deactivate","chainId","setOpen","handleOpen","handleClose","winner","setWinner","loading","setLoading","playerTokens","setPlayerTokens","tokenSupply","setTokenSupply","loadBots","loadGame","bots","setBots","callback","err","log","x","IOTABOTS_ABI","walletOfOwner","data","i","token_index","toNumber","tokenURI","metadata_url","axios","get","metadata","items","GAME","playerTokenBanlance","formatEther","totalSupply","botsTokenBanlance","start_game","bet","createSingleGame","edition","parseEther","once","_player_bet","_bot_bet","length","ex","content","textAlign","substring","Button","marginBottom","bot","name","disabled","CircularProgress","Modal","aria-labelledby","aria-describedby","left","transform","border","boxShadow","mt","marginTop","spacebotsContractAddress","Spacebots","SPACEBOTS_ABI","obj","tokenId","url","rel","SoonaRaceContractAddr","SoonabotRacing","_contract","soonabotId","setSoonabotId","races","setRaces","setMessage","showMessage","setTimeout","SoonabotRacingABI","raceId","getRace","race","push","fetchRaces","joinOrCreateRace","eggsTokenContract","ERC20ABI","entryFee","latestRaceId","latestRace","raceIdToJoin","createRace","txCreate","joinRace","txJoin","TextField","label","fullWidth","margin","my","List","ListItem","ListItemText","primary","TestSonabotsContractAddress","Soonabots","gameContract","setGameContract","TEST_SOONABOTS_ABI","Profile","connector","dna","date","toLocaleDateString","Info","getLibrary","Web3","App","theme","createTheme","typography","fontFamily","palette","light","main","dark","contrastText","secondary","ThemeProvider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62a3ca81.chunk.js","sourcesContent":["import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Badge from '@mui/material/Badge';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport Twitter from '@mui/icons-material/Twitter';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport { NavLink } from \"react-router-dom\";\n\nexport default function PrimarySearchAppBar() {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =\n        React.useState<null | HTMLElement>(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    // const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    //     setAnchorEl(event.currentTarget);\n    // };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }} to=\"/\">\n                    Home\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/games\">\n                    IOTABOTS\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/spacebots\">\n                    Spacebots\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/soonabots\">\n                    Soonabots\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/info\">\n                    Info\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/profile\">\n                    Profile\n                </NavLink>\n            </MenuItem>\n            <MenuItem\n\n            >\n                <IconButton\n                    target=\"_blank\"\n                    href=\"https://twitter.com/iotabots\"\n                    size=\"large\"\n                    aria-label=\"show 1 new tweets\"\n                    color=\"inherit\"\n                >\n                    <Badge badgeContent={1} color=\"error\">\n                        <Twitter />\n                    </Badge>\n                </IconButton>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        variant=\"h6\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'block', sm: 'block' } }}\n                    >\n                        <NavLink\n                            className=\"nav-link\" to=\"/\">\n                            IOTABOTS\n                        </NavLink>\n                    </Typography>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/\">\n                            Home\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/games\">\n                            IOTABOTS\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/spacebots\">\n                            Spacebots\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/soonabots\">\n                            Soonabots\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/info\">\n                            Info\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/profile\">\n                            Profile\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <IconButton target=\"_blank\" href=\"https://twitter.com/iotabots\" size=\"large\" aria-label=\"twitter\" color=\"inherit\">\n                            <Badge badgeContent={1} color=\"error\">\n                                <Twitter />\n                            </Badge>\n                        </IconButton>\n                    </Box>\n                    <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n                        <IconButton\n                            size=\"large\"\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon />\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </Box>\n    );\n}","\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nexport default function Album() {\n\n    function Copyright() {\n        return (\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                {'Copyright © '}\n                <Link color=\"inherit\" href=\"/\">\n                    iotabots.io\n                </Link>{' '}\n                {new Date().getFullYear()}\n                {'.'}\n            </Typography>\n        );\n    }\n\n    return (\n        <Box sx={{ bgcolor: 'background.paper', p: 6 }} component=\"footer\">\n            <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                *BEE* *BOB* *BOO*\n            </Typography>\n            <Typography\n                variant=\"subtitle1\"\n                align=\"center\"\n                color=\"text.secondary\"\n                component=\"p\"\n            >\n                Follow us on <a href=\"https://twitter.com/iotabots\">Twitter</a>\n            </Typography>\n            <Copyright />\n        </Box>\n    )\n}\n\n","import React from 'react';\nimport { Alert, AlertTitle } from '@mui/material';\nimport { NavLink } from \"react-router-dom\";\n\nconst TestnetWarningBanner = () => {\n  return (\n    <Alert severity=\"warning\">\n      <AlertTitle>Testnet Warning</AlertTitle>\n      The NFTs and games on this site are currently on the testnet and will NOT be carried over to the mainnet. Do NOT trade real tokens for testnet assets. All ownership will be reset according to snapshots. For more information,{' '}\n      <NavLink to=\"/info\" style={{ textDecoration: 'underline' }}>\n        click here\n      </NavLink>\n      .\n    </Alert>\n  );\n};\n\nexport default TestnetWarningBanner;","export default __webpack_public_path__ + \"static/media/Game.2ed01ee1.png\";","import Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { NavLink } from \"react-router-dom\";\nimport spacebots_img from \"../assets/images/Game.png\";\n\nexport default function Home() {\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Box\n                    sx={{\n                        bgcolor: 'background.paper',\n                        pt: 8,\n                        pb: 6,\n                    }}\n                >\n\n\n                    <Container id=\"what\" maxWidth=\"sm\">\n                        <Typography\n                            component=\"h1\"\n                            variant=\"h2\"\n                            align=\"center\"\n                            color=\"text.primary\"\n                            gutterBottom\n                        >\n                            IOTABOTS GAMES\n                        </Typography>\n                        <Typography variant=\"h5\" align=\"center\" color=\"text.secondary\" paragraph>\n                            *BEE* *BOB* *BOO*\n                        </Typography>\n                        <Typography variant=\"h5\" align=\"center\" color=\"text.secondary\" paragraph>\n                            On the 2nd November 2021, the first 500 IOTABOTS were minted for free on the public IOTA Smart Contracts EVM Testnet. More drops soon!\n                        </Typography>\n                        <Typography variant=\"h5\" align=\"center\" color=\"text.secondary\" paragraph>\n                            *BEE* *BOB* *BOO*\n                        </Typography>\n                        <Stack\n                            sx={{ pt: 4 }}\n                            direction=\"row\"\n                            spacing={2}\n                            justifyContent=\"center\"\n                        >\n                        </Stack>\n                    </Container>\n                </Box>\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Available Games\n                    </Typography>\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n\n                        <Grid item key={1} xs={12} sm={12} md={6}>\n                            <NavLink to=\"/games\">\n                                <Card\n                                    sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                                >\n                                    <CardMedia\n                                        component=\"img\"\n                                        sx={{\n                                            maxHeight: '280px',\n                                            minHeight: '280px',\n                                            padding: '10px'\n                                            // 16:9\n                                            // pt: '56.25%',\n                                        }}\n                                        image={`http://assets.iotabots.io/${1}.png`}\n                                        alt=\"IOTABOT\"\n                                    />\n                                    <CardContent sx={{ flexGrow: 1 }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h3\">\n                                            {`IOTABOTS `}\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                            {`Rock Paper & Scissors `}\n                                        </Typography>\n                                    </CardContent>\n\n                                </Card>\n                            </NavLink>\n                        </Grid>\n\n                        <Grid item key={1} xs={12} sm={12} md={6}>\n                            <NavLink to=\"/spacebots\">\n\n                                <Card\n                                    sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                                >\n                                    <CardMedia\n                                        component=\"img\"\n                                        sx={{\n                                            maxHeight: '280px',\n                                            minHeight: '280px',\n                                            padding: '10px'\n                                            // 16:9\n                                            // pt: '56.25%',\n                                        }}\n                                        image={spacebots_img}\n                                        alt=\"Spacebots\"\n                                    />\n                                    <CardContent sx={{ flexGrow: 0 }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h3\">\n                                            {`Spacebots `}\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                            {`Discover the Space `}\n                                        </Typography>\n                                    </CardContent>\n                                </Card>\n                            </NavLink>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </main>\n        </>\n    );\n}","import { InjectedConnector } from '@web3-react/injected-connector'\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1071],\n})","import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from \"../contracts/EGGSBurnLeaderboard.json\"; // Import the contract ABI\nimport Typography from \"@mui/material/Typography\";\nimport TOKEN from \"../contracts/Token.json\";\n\nimport { useWeb3React } from \"@web3-react/core\";\nconst BurnTokens = ({\n  _provider,\n  contractAddress,\n  tokenContractAddress,\n}: any) => {\n  const { library } = useWeb3React();\n  const [amount, setAmount] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const burnTokens = async () => {\n    const provider = new ethers.providers.Web3Provider(library.currentProvider);\n    if (!provider) {\n      setStatus(\"No provider available\");\n      return;\n    }\n\n    if (!ethers.utils.isAddress(contractAddress)) {\n      setStatus(\"Invalid contract address\");\n      return;\n    }\n\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(contractAddress, abi, signer);\n\n    try {\n      setStatus(\"Sending transaction...\");\n      const tx = await contract.burnTokens(ethers.utils.parseUnits(amount, 18));\n      setStatus(\"Transaction sent, waiting for confirmation...\");\n      await tx.wait();\n      setStatus(\"Transaction confirmed, tokens burned\");\n    } catch (error: any) {\n      setStatus(`Error: ${error.message}`);\n    }\n  };\n\n  const approveContract = async () => {\n    const provider = new ethers.providers.Web3Provider(library.currentProvider);\n    if (!provider) {\n      setStatus(\"No provider available\");\n      return;\n    }\n\n    if (!ethers.utils.isAddress(contractAddress)) {\n      setStatus(\"Invalid contract address\");\n      return;\n    }\n\n    const signer = provider.getSigner();\n    const amountToApprove = ethers.utils.parseUnits(amount, 18);\n\n    try {\n      setStatus(\"Sending approval transaction...\");\n      let token = new ethers.Contract(tokenContractAddress, TOKEN.abi, signer);\n      const tx = await token.approve(contractAddress, amountToApprove);\n      setStatus(\"Approval transaction sent, waiting for confirmation...\");\n      await tx.wait();\n      setStatus(\"Approval transaction confirmed\");\n    } catch (error: any) {\n      setStatus(`Error: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <Typography gutterBottom variant=\"h4\" component=\"h4\">\n        Burn EGGS Tokens\n      </Typography>\n      <div>\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          placeholder=\"Amount to burn\"\n        />\n        <button onClick={approveContract}>Approve Contract</button>\n\n        <button onClick={burnTokens}>Burn Tokens</button>\n      </div>\n      {status && <p>{status}</p>}\n    </div>\n  );\n};\n\nexport default BurnTokens;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from \"../contracts/EGGSBurnLeaderboard.json\"; // Import the contract ABI\n\nconst Leaderboard = ({ provider, contractAddress, top = 10 }: any) => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  provider = new ethers.providers.Web3Provider(provider);\n  useEffect(() => {\n    const fetchLeaderboard = async () => {\n      if (!provider || !ethers.utils.isAddress(contractAddress)) return;\n\n      const contract = new ethers.Contract(contractAddress, abi, provider);\n      try {\n        const topBurners = await contract.getTopBurners(top);\n        const burnersData: any = await Promise.all(\n          topBurners.map(async (burner: any) => {\n            const burnedAmount = await contract.burnedTokens(burner);\n            return {\n              address: burner,\n              burnedAmount: ethers.utils.formatUnits(burnedAmount, 18),\n            };\n          })\n        );\n        setLeaderboard(burnersData);\n      } catch (error: any) {\n        console.error(`Error fetching leaderboard: ${error.message}`);\n      }\n    };\n\n    fetchLeaderboard();\n  }, [provider, contractAddress, top]);\n\n  const shortenAddress = (address: any) => {\n    if (!address) return \"\";\n    return address.slice(0, 6) + \"...\" + address.slice(-4);\n  };\n\n  const AddressWithTooltip = ({ address }: any) => {\n    return (\n      <span\n        style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n        title={address}\n      >\n        {shortenAddress(address)}\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      <h2>Leaderboard: Top {top} Burners</h2>\n      <table>\n        <thead>\n          <tr style={{width: \"100%\", minWidth: \"2000px\"}}>\n            <th style={{width: \"(100/x)%\"}}>Rank</th>\n            <th style={{width: \"(100/x)%\"}}>Address</th>\n            <th style={{width: \"(100/x)%\"}}>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {leaderboard.map((burner: any, index) => (\n            <tr key={burner?.address}>\n              <td>{index + 1}</td>\n              <td>\n                <AddressWithTooltip address={burner.address} />\n              </td>\n              <td>{burner?.burnedAmount} EGGS</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport TOKEN from \"../contracts/Token.json\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nconst TotalBurnedTokens = ({ _provider, tokenAddress }: any) => {\n  const [totalBurnedTokens, setTotalBurnedTokens] = useState('');\n  const deadAddress = '0x000000000000000000000000000000000000dEaD';\n  const { library } = useWeb3React();\n  useEffect(() => {\n    const fetchTotalBurnedTokens = async () => {\n        const provider = new ethers.providers.Web3Provider(library.currentProvider);\n      if (!provider || !ethers.utils.isAddress(tokenAddress)) return;\n\n      const tokenContract = new ethers.Contract(tokenAddress, TOKEN.abi, provider);\n      try {\n        const burnedTokens = await tokenContract.balanceOf(deadAddress);\n        setTotalBurnedTokens(ethers.utils.formatUnits(burnedTokens, 18));\n      } catch (error: any) {\n        console.error(`Error fetching total burned tokens: ${error.message}`);\n      }\n    };\n\n    fetchTotalBurnedTokens();\n  }, [library, tokenAddress]);\n\n  return (\n    <div>\n      <h2>Total Burned Tokens</h2>\n      <p>{totalBurnedTokens ? `${totalBurnedTokens} EGGS` : 'Loading...'}</p>\n    </div>\n  );\n};\n\nexport default TotalBurnedTokens;\n","import CssBaseline from \"@mui/material/CssBaseline\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport * as React from \"react\";\n\nimport { ethers } from \"ethers\";\n// import { web3 } from \"web\";\n\nimport IOTABOTS_ABI from \"../contracts/iotabots_abi.json\";\nimport GAME from \"../contracts/Game.json\";\nimport TOKEN from \"../contracts/Token.json\";\n\nimport { injected } from \"../components/wallet/connectors\";\nimport BurnTokens from \"../components/BurnTokens\";\nimport EGGSBurnLeaderboard from \"../components/EGGSBurnLeaderboard\";\nimport TotalBurnedTokens from '../components/TotalBurnedTokens';\n\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Modal from \"@mui/material/Modal\";\n\nimport axios from \"axios\";\n\nimport { useState, useEffect } from \"react\";\n\n// const iotabotsContractAddress = \"0x6c2D60145cDD0396bd03298693495bf98fcdD93E\"; // LIVE\nconst iotabotsContractAddress = \"0xb5A53615170e4684E488C9E1c641aB9dDC307489\"; // Test\n\nconst gameContractAddress = \"0x3CE8aB86dED969004102caB650060373e04A0448\"; // GameTest\n\nconst tokenContractAddress = \"0xdFCF738225F6508F7A664c3c7D236432501e16d4\"; // Test Token\n\nconst burnTokenContractAddress = \"0x08c399d67d6A536b21d8D4CAd2F703fFd3e0aF58\"; // Test Token\n\nexport default function Games() {\n  const { active, account, library, activate, deactivate, chainId } =\n    useWeb3React();\n\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const [winner, setWinner] = useState({ message: \"\" });\n  const [loading, setLoading] = useState(false);\n\n  const [playerTokens, setPlayerTokens] = useState(\"0.0\");\n  const [tokenSupply, setTokenSupply] = useState(\"0.0\");\n\n  useEffect(() => {\n    if (active) {\n      loadBots();\n      loadGame();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [active]);\n\n  interface Bot {\n    attributes: Array<object>;\n    date: number;\n    description: string;\n    dna: string;\n    edition: number;\n    image: string;\n    name: string;\n  }\n\n  const [bots, setBots] = useState<Array<any>>([]);\n\n  const callback = function (err: any) {\n    console.log(\"callback1\", err);\n  };\n\n  async function connect() {\n    try {\n      let x = await activate(injected, callback);\n      console.log(\"activated\", x);\n      console.log(\"activated\", active);\n      console.log(\"activated\", account);\n      // useEffect(() => {\n      //     loadBots()\n      // }, [])\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function loadBots() {\n    // await connect();\n    const provider = new ethers.providers.Web3Provider(library.currentProvider);\n    let contract = new ethers.Contract(\n      iotabotsContractAddress,\n      IOTABOTS_ABI,\n      provider\n    );\n    console.log(\"contract\", contract);\n    console.log(\"account\", account);\n\n    const data = await contract.walletOfOwner(account);\n    console.log(\"data:\", data);\n    const items: Array<Bot> = await Promise.all(\n      data.map(async (i: any) => {\n        let token_index = i.toNumber();\n        console.log(\"token_index:\", token_index);\n\n        const metadata_url = await contract.tokenURI(token_index);\n        console.log(\"metadata_url:\", metadata_url);\n\n        const metadata = await axios.get(metadata_url);\n\n        console.log(\"metadata:\", metadata.data);\n        return metadata.data;\n      })\n    );\n\n    console.log(\"items:\", items);\n    setBots(items);\n    console.log(\"bots:\", bots);\n    // const tokenContract = new ethers.Contract(iotabotsContractAddress, IOTABOTS_ABI, provider)\n    // console.log(\"tokenContract:\", tokenContract)\n  }\n\n  async function loadGame() {\n    // await connect();\n    console.log(\"loadGame\");\n\n    const provider = new ethers.providers.Web3Provider(library.currentProvider);\n    let contract = new ethers.Contract(gameContractAddress, GAME.abi, provider);\n    console.log(\"contract\", contract);\n    console.log(\"account\", account);\n\n    let token = new ethers.Contract(tokenContractAddress, TOKEN.abi, provider);\n    let playerTokenBanlance = await token.balanceOf(account);\n    playerTokenBanlance = ethers.utils.formatEther(playerTokenBanlance);\n    console.log(\"playerTokenBanlance\", playerTokenBanlance);\n    let totalSupply = await token.totalSupply();\n    totalSupply = ethers.utils.formatEther(totalSupply);\n    setTokenSupply(totalSupply);\n    console.log(\"totalSupply\", totalSupply);\n    setPlayerTokens(playerTokenBanlance);\n\n    let botsTokenBanlance = await token.balanceOf(iotabotsContractAddress);\n    botsTokenBanlance = ethers.utils.formatEther(botsTokenBanlance);\n    console.log(\"botsTokenBanlance\", botsTokenBanlance);\n  }\n\n  async function start_game(bet: any) {\n    try {\n      console.log(\"loadGame\");\n\n      setWinner({ message: \"\" });\n      setLoading(true);\n\n      const provider = new ethers.providers.Web3Provider(\n        library.currentProvider\n      );\n      const signer = provider.getSigner();\n      let contract = new ethers.Contract(gameContractAddress, GAME.abi, signer);\n\n      console.log(\"start_game\", bots);\n      await contract.createSingleGame(bots[0]?.edition, bet, {\n        value: ethers.utils.parseEther(\"1\"),\n      });\n\n      contract.once(\"gamePlayed\", (winner: string, _player_bet, _bot_bet) => {\n        console.log(\"gamePlayed\");\n        console.log(winner, _player_bet.toNumber(), _bot_bet.toNumber());\n\n        if (winner && winner.length > 0) {\n          if (winner === account) {\n            console.log(\"😀 won\");\n            setWinner({\n              message: `😀 You won 10 EGGS! 🎉`,\n            });\n          } else if (winner === gameContractAddress) {\n            console.log(\"🤖 won\");\n            setWinner({\n              message: `Sorry - your 🤖 won!`,\n            });\n          } else {\n            console.log(\"Draw!\");\n            setWinner({\n              message: `Draw! There is no winner!`,\n            });\n          }\n        }\n        setLoading(false);\n        handleOpen();\n        loadGame();\n      });\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function disconnect() {\n    try {\n      deactivate();\n      console.log(\"deactivated\");\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  const style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n\n  var content;\n  if (active) {\n    content = (\n      <>\n        <br />\n        <Container maxWidth=\"sm\">\n          <Box\n            sx={{ bgcolor: \"#cfe8fc\", padding: \"10px\", textAlign: \"center\" }}\n          >\n            {active ? (\n              <span>\n                Connected with{\" \"}\n                <b>{`${account!.substring(0, 6)}...${account!.substring(\n                  account!.length - 4\n                )}`}</b>\n              </span>\n            ) : (\n              <span>Not connected</span>\n            )}\n            <p>ChainId: {chainId}</p>\n            <Button variant=\"outlined\" onClick={disconnect}>\n              Disconnect\n            </Button>\n          </Box>\n        </Container>\n        <hr />\n        <br />\n\n        <Card\n          sx={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            marginBottom: \"30px\",\n          }}\n        >\n          <CardContent sx={{ flexGrow: 1 }}>\n            <Typography gutterBottom variant=\"h6\" component=\"h6\">\n              Total Supply: {tokenSupply} EGGS\n            </Typography>\n            <Typography gutterBottom variant=\"h6\" component=\"h6\">\n              Player Balance: {playerTokens} EGGS\n            </Typography>\n          </CardContent>\n        </Card>\n        <Typography\n          component=\"h3\"\n          variant=\"h3\"\n          align=\"center\"\n          color=\"#fff\"\n          gutterBottom\n        >\n          Your IOTABOTS:\n        </Typography>\n        <Container maxWidth=\"sm\">\n          <Box sx={{ textAlign: \"center\" }}>\n            {bots.map((bot, index) => (\n              <Grid item key={index} xs={12} sm={12} md={12}>\n                <Card\n                // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n                >\n                  <CardMedia\n                    height=\"100%\"\n                    component=\"img\"\n                    image={bot.image}\n                    alt=\"IOTABOT\"\n                  />\n                  <CardContent sx={{ flexGrow: 1 }}>\n                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                      {`IOTABOT ${bot.name}`}\n                    </Typography>\n                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                      {`Play against your IOTABOT!`}\n                    </Typography>\n                    <br />\n                    <br />\n\n                    <Button\n                      disabled={loading}\n                      className=\"playBtn\"\n                      variant=\"outlined\"\n                      onClick={() => start_game(0)}\n                    >\n                      ✊\n                    </Button>\n                    <Button\n                      disabled={loading}\n                      className=\"playBtn\"\n                      variant=\"outlined\"\n                      onClick={() => start_game(1)}\n                    >\n                      ✋\n                    </Button>\n                    <Button\n                      disabled={loading}\n                      className=\"playBtn\"\n                      variant=\"outlined\"\n                      onClick={() => start_game(2)}\n                    >\n                      ✌️\n                    </Button>\n                    <br />\n                    <br />\n                    {loading ? (\n                      <CircularProgress />\n                    ) : (\n                      <p className=\"result_field\">Choose and play!</p>\n                    )}\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Box>\n\n          <Modal\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n          >\n            <Box sx={style}>\n              <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                IOTABOTS Game\n              </Typography>\n              <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                {winner ? winner.message : \"\"}\n              </Typography>\n              <Button onClick={handleClose}>Okay!</Button>\n            </Box>\n          </Modal>\n          <Card\n            sx={{\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              marginBottom: \"30px\",\n              marginTop: \"50px\",\n            }}\n          >\n            <CardContent sx={{ flexGrow: 1 }}>\n              <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                Rules\n              </Typography>\n              <Typography gutterBottom variant=\"body1\">\n                <ol>\n                  <li>\n                    Each player must connect their wallet to the IOTABOTVERSE\n                    platform and hold an IOTABOT (ERC721 Token) to participate\n                    in the game.\n                  </li>\n                  <li>Players can only play against their own IOTABOT.</li>\n                  <li>\n                    Each game round consists of one move: Rock, Paper, or\n                    Scissors.\n                  </li>\n                  <li>\n                    To initiate a game, the player must submit a move by signing\n                    a transaction on the ShimmerEVM network.\n                  </li>\n                  <li>\n                    The IOTABOT will automatically submit its move, which can be\n                    determined randomly or based on predefined logic.\n                  </li>\n                  <li>\n                    Once both moves have been submitted, the smart contract will\n                    determine the winner using the standard Rock Paper Scissors\n                    rules:\n                    <ul>\n                      <li>Rock beats Scissors</li>\n                      <li>Scissors beats Paper</li>\n                      <li>Paper beats Rock</li>\n                    </ul>\n                  </li>\n                  <li>If the player wins, they are awarded 10 EGGS tokens.</li>\n                  <li>\n                    In case of a tie or a loss, the game is declared a draw or a\n                    loss respectively, and no rewards will be distributed.\n                  </li>\n                  <li>Have fun!</li>\n                </ol>\n              </Typography>\n            </CardContent>\n          </Card>\n        </Container>\n        <Card\n          sx={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            marginBottom: \"30px\",\n            marginTop: \"50px\",\n          }}\n        >\n          <CardContent sx={{ flexGrow: 1 }}>\n            <BurnTokens\n              provider={library.currentProvider}\n              contractAddress={burnTokenContractAddress}\n              tokenContractAddress={tokenContractAddress}\n            />\n                <TotalBurnedTokens provider={library.currentProvider} tokenAddress={tokenContractAddress} />\n\n            <EGGSBurnLeaderboard\n              provider={library.currentProvider}\n              contractAddress={burnTokenContractAddress}\n              top={10}\n            />\n          <hr></hr>\n          <br />\n          <br />\n          <br />\n          <br />\n            <Typography gutterBottom variant=\"h4\" component=\"h4\">\n              How it works\n            </Typography>\n            <Typography gutterBottom variant=\"h5\" component=\"h5\">\n              EGGS Token Burning Process\n            </Typography>\n            <p>\n              Burning EGGS tokens permanently removes a specified amount of\n              tokens from circulation, reducing the total supply. This action is\n              irreversible.\n            </p>\n            <Typography gutterBottom variant=\"h6\" component=\"h6\">\n              Step 1: Approve the contract\n            </Typography>\n            <p>\n              Before burning tokens, you need to approve the smart contract to\n              transfer the specified amount of EGGS tokens on your behalf. This\n              is a security measure implemented in the ERC20 standard to ensure\n              that you maintain control over your tokens.\n            </p>\n            <p>\n              By approving the contract, you grant permission for the smart\n              contract to transfer a specific amount of tokens from your\n              account. This allowance can be changed at any time by approving a\n              new amount.\n            </p>\n            <Typography gutterBottom variant=\"h6\" component=\"h6\">\n              Step 2: Burn tokens\n            </Typography>\n            <p>\n              After approving the contract, you can proceed to burn the tokens.\n              Clicking the \"Burn Tokens\" button will send a transaction to the\n              smart contract, which will transfer the specified amount of tokens\n              to a designated \"dead\" address. This action effectively removes\n              the tokens from circulation.\n            </p>\n            <p>\n              Please note that burning tokens is an irreversible action. Once\n              burned, the tokens cannot be recovered.\n            </p>\n            <p>Have fun!</p>\n          </CardContent>\n        </Card>\n      </>\n    );\n  } else {\n    content = (\n      <Container maxWidth=\"sm\">\n        <Box sx={{ bgcolor: \"#cfe8fc\", padding: \"10px\", textAlign: \"center\" }}>\n          <Button variant=\"outlined\" onClick={connect}>\n            Connect to MetaMask\n          </Button>\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <Container sx={{ py: 8 }} maxWidth=\"md\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            align=\"center\"\n            color=\"#fff\"\n            gutterBottom\n          >\n            IOTABOTS Games\n          </Typography>\n          {/* End hero unit */}\n          {content}\n        </Container>\n      </main>\n    </>\n  );\n}\n","import CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { useWeb3React } from \"@web3-react/core\"\n\nimport { ethers } from \"ethers\";\n// import { web3 } from \"web\";\n\nimport SPACEBOTS_ABI from \"../contracts/spacebots_abi.json\";\n\nimport { injected } from \"../components/wallet/connectors\"\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\n\n\nimport { useState, useEffect } from 'react';\n\n\nimport spacebots_img from \"../assets/images/Game.png\";\n\nconst spacebotsContractAddress = \"0x4578D32Da12F24D6Cabc0E313bc610bcbD9a1B77\";\n\nexport default function Spacebots() {\n\n    const { active, account, library, activate, deactivate, chainId } = useWeb3React()\n\n    useEffect(() => {\n        if (active) {\n            loadBots()\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [active])\n\n\n    const [bots, setBots] = useState<Array<any>>([]);\n\n    const callback = function (err: any) {\n        console.log(\"callback1\", err)\n    }\n\n    async function connect() {\n        try {\n            let x = await activate(injected, callback)\n            console.log(\"activated\", x)\n            console.log(\"activated\", active)\n            console.log(\"activated\", account)\n            // useEffect(() => {\n            //     loadBots()\n            // }, [])\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n    async function loadBots() {\n        // await connect();\n        const provider = new ethers.providers.Web3Provider(library.currentProvider)\n        let contract = new ethers.Contract(\n            spacebotsContractAddress,\n            SPACEBOTS_ABI,\n            provider\n        )\n        console.log(\"contract\", contract)\n        console.log(\"account\", account)\n\n\n        const data = await contract.walletOfOwner(account)\n        console.log(\"data:\", data)\n        const items: Array<any> = await Promise.all(data.map(async (i: any) => {\n            let token_index = i.toNumber()\n            console.log(\"token_index:\", token_index)\n\n            const metadata_url = await contract.tokenURI(token_index)\n            console.log(\"metadata_url:\", metadata_url)\n\n            let obj = { \n                \n                tokenId: token_index,\n                url: metadata_url\n             }\n\n            // const metadata = await axios.get(metadata_url)\n\n            // console.log(\"metadata:\", metadata.data)\n            return obj\n        }))\n\n        console.log(\"items:\", items)\n        setBots(items)\n        console.log(\"bots:\", bots)\n        // const tokenContract = new ethers.Contract(iotabotsContractAddress, IOTABOTS_ABI, provider)\n        // console.log(\"tokenContract:\", tokenContract)\n    }\n\n\n    async function disconnect() {\n        try {\n            deactivate()\n            console.log(\"deactivated\")\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n\n    var content;\n    if (active) {\n        content = <>\n            <br />\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    {active ? <span>Connected with <b>{`${account!.substring(0, 6)}...${account!.substring(account!.length - 4)}`}</b></span> : <span>Not connected</span>}\n                    <p>ChainId: {chainId}</p>\n                    <Button variant=\"outlined\" onClick={disconnect} >Disconnect</Button>\n                </Box>\n            </Container>\n            <hr />\n            <br />\n\n            <Typography\n                component=\"h3\"\n                variant=\"h3\"\n                align=\"center\"\n                color=\"#fff\"\n                gutterBottom\n            >\n                Your Spacebots:</Typography>\n            <Container maxWidth=\"sm\">\n                <Box sx={{ textAlign: 'center' }} >\n\n                    {bots.map((bot, index) => (\n                        <Grid item key={index} xs={12} sm={12} md={12}>\n                            <Card\n                            // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n                            >\n                                <CardMedia\n                                    height=\"100%\"\n                                    component=\"img\"\n                                    image={spacebots_img}\n                                    alt=\"Spacebots\"\n                                />\n                                <CardContent sx={{ flexGrow: 1 }}>\n                                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                                        {`Spacebots ${bot.tokenId}`}\n                                    </Typography>\n                                    <Typography\n                                        component=\"h4\"\n                                        variant=\"h4\"\n                                        align=\"center\"\n                                        color=\"#fff\"\n                                        gutterBottom\n                                    >\n                                        <a rel=\"noreferrer\" target=\"_blank\" href={bot.url}>Play</a>\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Box>\n            </Container>\n        </>;\n    } else {\n        content =\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    <Button variant=\"outlined\" onClick={connect} >Connect to MetaMask</Button></Box>\n            </Container>;\n    }\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Spacebots\n                    </Typography>\n                    {/* End hero unit */}\n                    {content}\n                </Container>\n            </main>\n        </>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n} from \"@mui/material\";\n\nimport { ethers } from \"ethers\";\nimport { useWeb3React } from \"@web3-react/core\";\n\n// ABIs\nimport SoonabotRacingABI from \"../contracts/SoonabotRace.json\";\nimport ERC20ABI from \"../contracts/Token.json\";\n// import ERC721ABI from \"../contracts/iotabots_abi.json\";\n\n// Contract addresses\nconst SoonaRaceContractAddr = \"0x342d2Fa65Ea46Eb9028053095904d08860A82fF3\";\nconst eggsTokenAddress = \"0xdFCF738225F6508F7A664c3c7D236432501e16d4\"; // Test Token\n// const TestSonabotsContractAddr = \"0x2f5C574ddF275b4cDfAE26fE8e75621c4B7E106e\";\n\nconst SoonabotRacing = ({ _contract }: any) => {\n  const { library } = useWeb3React();\n\n  const [soonabotId, setSoonabotId] = useState(0);\n  const [races, setRaces] = useState<Array<any>>([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const showMessage = (message: string) => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, 3000);\n  };\n\n  useEffect(() => {\n    const fetchRaces = async () => {\n      const provider = new ethers.providers.Web3Provider(\n        library.currentProvider\n      );\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        SoonaRaceContractAddr,\n        SoonabotRacingABI,\n        signer\n      );\n      const races = [];\n      let raceId = 0;\n      let race;\n\n      do {\n        try {\n          race = await contract.getRace(raceId);\n          races.push(race);\n          raceId++;\n          console.log(\"race\", race);\n        } catch (error) {\n          console.log(\"error\", error);\n          race = null;\n        }\n      } while (race);\n\n      console.log(\"races\", races);\n\n      setRaces(races);\n    };\n\n    fetchRaces();\n  }, [library, loading]);\n\n  const handleSoonabotIdChange = (e: any) => {\n    setSoonabotId(e.target.value);\n  };\n\n  const joinOrCreateRace = async () => {\n    setLoading(true);\n    try {\n      const provider = new ethers.providers.Web3Provider(\n        library.currentProvider\n      );\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        SoonaRaceContractAddr,\n        SoonabotRacingABI,\n        signer\n      );\n\n      const eggsTokenContract = new ethers.Contract(\n        eggsTokenAddress,\n        ERC20ABI.abi,\n        signer\n      );\n\n      // const soonabotNFTContract = new ethers.Contract(\n      //   TestSonabotsContractAddr,\n      //   ERC721ABI,\n      //   signer\n      // );\n\n      const entryFee = ethers.utils.parseUnits(\"1\", 18); // Assuming 18 decimals in EGGS token\n      await eggsTokenContract.approve(SoonaRaceContractAddr, entryFee);\n\n      const latestRaceId = races.length - 1;\n      const latestRace = latestRaceId >= 0 ? races[latestRaceId] : null;\n      let raceIdToJoin = latestRaceId;\n\n      if (!latestRace || latestRace[1].length >= 3) {\n        const txCreate = await contract.createRace();\n        await txCreate.wait();\n        raceIdToJoin++;\n      }\n\n      const txJoin = await contract.joinRace(raceIdToJoin, soonabotId);\n      await txJoin.wait();\n      showMessage(\"Successfully joined the race!\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      showMessage(\"Error: Unable to join or create a race.\");\n    }\n    setSoonabotId(0);\n    setLoading(false);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h4\">Soonabot Racing</Typography>\n      <TextField\n        label=\"Soonabot ID\"\n        type=\"number\"\n        value={soonabotId}\n        onChange={handleSoonabotIdChange}\n        fullWidth\n        margin=\"normal\"\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={joinOrCreateRace}\n        fullWidth\n      >\n        Join or Create Race\n      </Button>\n      <Box my={2}>\n        {loading && <CircularProgress />}\n        <Typography>{message}</Typography>\n      </Box>\n      <Typography variant=\"h6\">List of Races:</Typography>\n      <List>\n        {races.map((race, index) => (\n          <ListItem key={index}>\n            <ListItemText primary={`Race ${index + 1} `} />\n            <ListItemText primary={`${race[1].length} player(s)`} />\n            <ListItemText primary={`Bots: `} />\n            {race[0].map((bot: any) => (\n              <ListItemText\n                primary={`${race[2].toNumber() === bot.toNumber() ? \"🏆\" : \"\"}${bot} `}\n              />\n            ))}\n          </ListItem>\n        ))}\n      </List>\n      <Typography variant=\"body1\">\n        To participate, you need to pay an entry fee of 1 EGGS token and have a\n        Soonabot NFT. Enter your Soonabot ID and click the button to join or\n        create a race. Each race can have up to 3 bots.\n      </Typography>\n    </div>\n  );\n};\n\nexport default SoonabotRacing;\n","import CssBaseline from \"@mui/material/CssBaseline\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { ethers } from \"ethers\";\n// import { web3 } from \"web\";\n\nimport TEST_SOONABOTS_ABI from \"../contracts/iotabots_abi.json\";\n\nimport { injected } from \"../components/wallet/connectors\";\nimport SoonabotRacing from \"../components/SoonabotRacing\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\n\nimport { useState, useEffect } from \"react\";\n\nimport SoonabotRacingABI from \"../contracts/SoonabotRace.json\";\n\nconst SoonaRaceContractAddr = \"0x342d2Fa65Ea46Eb9028053095904d08860A82fF3\";\nconst TestSonabotsContractAddress =\n  \"0x2f5C574ddF275b4cDfAE26fE8e75621c4B7E106e\";\n\nexport default function Soonabots() {\n  const { active, account, library, activate, deactivate, chainId } =\n    useWeb3React();\n\n  useEffect(() => {\n    if (active) {\n      loadBots();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [active]);\n\n  const [bots, setBots] = useState<Array<any>>([]);\n  const [gameContract, setGameContract] = useState<any>(null);\n\n  const callback = function (err: any) {\n    console.log(\"callback1\", err);\n  };\n\n  async function connect() {\n    try {\n      let x = await activate(injected, callback);\n      console.log(\"activated\", x);\n      console.log(\"activated\", active);\n      console.log(\"activated\", account);\n      // useEffect(() => {\n      //     loadBots()\n      // }, [])\n      const provider = new ethers.providers.Web3Provider(\n        library.currentProvider\n      );\n      const contract = new ethers.Contract(\n        SoonaRaceContractAddr,\n        SoonabotRacingABI,\n        provider\n      );\n      setGameContract(contract);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function loadBots() {\n    // await connect();\n    const provider = new ethers.providers.Web3Provider(library.currentProvider);\n    let contract = new ethers.Contract(\n      TestSonabotsContractAddress,\n      TEST_SOONABOTS_ABI,\n      provider\n    );\n    console.log(\"contract\", contract);\n    console.log(\"account\", account);\n\n    const data = await contract.walletOfOwner(account);\n    console.log(\"data:\", data);\n    const items: Array<any> = await Promise.all(\n      data.map(async (i: any) => {\n        let token_index = i.toNumber();\n        console.log(\"token_index:\", token_index);\n\n        const metadata_url = await contract.tokenURI(token_index);\n        console.log(\"metadata_url:\", metadata_url);\n\n        let obj = {\n          tokenId: token_index,\n          url: metadata_url,\n        };\n\n        // const metadata = await axios.get(metadata_url)\n\n        // console.log(\"metadata:\", metadata.data)\n        return obj;\n      })\n    );\n\n    console.log(\"items:\", items);\n    setBots(items);\n    console.log(\"bots:\", bots);\n    // const tokenContract = new ethers.Contract(iotabotsContractAddress, IOTABOTS_ABI, provider)\n    // console.log(\"tokenContract:\", tokenContract)\n  }\n\n  async function disconnect() {\n    try {\n      deactivate();\n      console.log(\"deactivated\");\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  var content;\n  if (active) {\n    content = (\n      <>\n        <br />\n        <Container maxWidth=\"sm\">\n          <Box\n            sx={{ bgcolor: \"#cfe8fc\", padding: \"10px\", textAlign: \"center\" }}\n          >\n            {active ? (\n              <span>\n                Connected with{\" \"}\n                <b>{`${account!.substring(0, 6)}...${account!.substring(\n                  account!.length - 4\n                )}`}</b>\n              </span>\n            ) : (\n              <span>Not connected</span>\n            )}\n            <p>ChainId: {chainId}</p>\n            <Button variant=\"outlined\" onClick={disconnect}>\n              Disconnect\n            </Button>\n          </Box>\n        </Container>\n        <hr />\n        <br />\n\n        <Typography\n          component=\"h3\"\n          variant=\"h3\"\n          align=\"center\"\n          color=\"#fff\"\n          gutterBottom\n        >\n          Your Soonabots:\n        </Typography>\n        <Container maxWidth=\"sm\">\n          <Box sx={{ textAlign: \"center\" }}>\n            {bots.map((bot, index) => (\n              <Grid item key={index} xs={12} sm={12} md={12}>\n                <Card\n                // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n                >\n                  <CardContent sx={{ flexGrow: 1 }}>\n                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                      {`Soonabots ${bot.tokenId}`}\n                    </Typography>\n                    <Typography\n                      component=\"h4\"\n                      variant=\"h4\"\n                      align=\"center\"\n                      color=\"#fff\"\n                      gutterBottom\n                    >\n                      🤖\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Box>\n        </Container>\n        <hr />\n        <br />\n        <br />\n        <br />\n        <Card\n        // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n        >\n          <CardContent sx={{ flexGrow: 1 }}>\n            <Typography gutterBottom variant=\"h6\" component=\"h6\">\n              {`New web3 Game:`}\n            </Typography>\n            <SoonabotRacing\n              contract={gameContract}\n            />\n          </CardContent>\n        </Card>\n      </>\n    );\n  } else {\n    content = (\n      <Container maxWidth=\"sm\">\n        <Box sx={{ bgcolor: \"#cfe8fc\", padding: \"10px\", textAlign: \"center\" }}>\n          <Button variant=\"outlined\" onClick={connect}>\n            Connect to MetaMask\n          </Button>\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <Container sx={{ py: 8 }} maxWidth=\"md\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            align=\"center\"\n            color=\"#fff\"\n            gutterBottom\n          >\n            Soonabots\n          </Typography>\n          {/* End hero unit */}\n          {content}\n        </Container>\n      </main>\n    </>\n  );\n}\n","import CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { useWeb3React } from \"@web3-react/core\"\n\nimport { ethers } from \"ethers\";\n\nimport IOTABOTS_ABI from \"../contracts/iotabots_abi.json\";\n\nimport { injected } from \"../components/wallet/connectors\"\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\n\nimport axios from 'axios'\n\nimport { useState, useEffect } from 'react';\n\n// const iotabotsContractAddress = \"0x6c2D60145cDD0396bd03298693495bf98fcdD93E\"; // LIVE\nconst iotabotsContractAddress = \"0xb5A53615170e4684E488C9E1c641aB9dDC307489\"; // Test\n\nexport default function Profile() {\n\n    const { active, account, library, connector, activate, deactivate } = useWeb3React()\n\n    useEffect(() => {\n        if (active) {\n            loadBots()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [active])\n\n    interface Bot {\n        attributes: Array<object>;\n        date: number;\n        description: string;\n        dna: string;\n        edition: number;\n        image: string;\n        name: string;\n    }\n\n\n    const [bots, setBots] = useState<Array<any>>([]);\n\n    const callback = function (err: any) {\n        console.log(\"callback1\", err)\n    }\n\n    async function connect() {\n        try {\n            let x = await activate(injected, callback)\n            console.log(\"activated\", x)\n            console.log(\"activated\", active)\n            console.log(\"activated\", account)\n            // useEffect(() => {\n            //     loadBots()\n            // }, [])\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n    async function loadBots() {\n        // await connect();\n        console.log(\"library\", library)\n        console.log(\"connector\", connector)\n        const provider = new ethers.providers.Web3Provider(library.currentProvider)\n        console.log(\"provider\", provider)\n        let contract = new ethers.Contract(\n            iotabotsContractAddress,\n            IOTABOTS_ABI,\n            provider\n        )\n        console.log(\"contract\", contract)\n        console.log(\"account\", account)\n\n\n        const data = await contract.walletOfOwner(account)\n        console.log(\"data:\", data)\n        const items: Array<Bot> = await Promise.all(data.map(async (i: any) => {\n            let token_index = i.toNumber()\n            console.log(\"token_index:\", token_index)\n\n            const metadata_url = await contract.tokenURI(token_index)\n            console.log(\"metadata_url:\", metadata_url)\n\n            const metadata = await axios.get(metadata_url)\n\n            console.log(\"metadata:\", metadata)\n            console.log(\"metadata:\", metadata.data)\n            return metadata.data\n        }))\n\n        console.log(\"items:\", items)\n        setBots(items)\n        console.log(\"bots:\", bots)\n        // const tokenContract = new ethers.Contract(iotabotsContractAddress, IOTABOTS_ABI, provider)\n        // console.log(\"tokenContract:\", tokenContract)\n    }\n\n    async function disconnect() {\n        try {\n            deactivate()\n            console.log(\"deactivated\")\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n\n    var content;\n    if (active) {\n        content = <>\n            <br />\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    {active ? <span>Connected with <b>{`${account!.substring(0, 6)}...${account!.substring(account!.length - 4)}`}</b></span> : <span>Not connected</span>}\n                    <Button variant=\"outlined\" onClick={disconnect} >Disconnect</Button>\n                </Box>\n            </Container>\n            <hr />\n            <br />\n\n            <Typography\n                component=\"h3\"\n                variant=\"h3\"\n                align=\"center\"\n                color=\"#fff\"\n                gutterBottom\n            >\n                Your IOTABOTS:</Typography>\n            <Container maxWidth=\"sm\">\n                <Box sx={{ textAlign: 'center'}} >\n\n                    {bots.map((bot, index) => (\n                        <Grid item key={index} xs={12} sm={12} md={12}>\n                            <Card\n                            // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n                            >\n                                <CardMedia\n                                    height=\"100%\"\n                                    component=\"img\"\n                                    image={bot.image}\n                                    alt=\"IOTABOT\"\n                                />\n                                <CardContent sx={{ flexGrow: 1 }}>\n                                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                                        {`IOTABOT ${bot.name}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`DNA ${bot.dna}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`Edition ${bot.edition}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`Created on ${new Date(bot.date).toLocaleDateString()}`}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Box>\n            </Container>\n        </>;\n    } else {\n        content =\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    <Button variant=\"outlined\" onClick={connect} >Connect to MetaMask</Button></Box>\n            </Container>;\n    }\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Your Profile\n                    </Typography>\n                    {/* End hero unit */}\n                    {content}\n                </Container>\n            </main>\n        </>\n    );\n}","import CssBaseline from \"@mui/material/CssBaseline\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\n\nexport default function Info() {\n  return (\n    <>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <Container sx={{ py: 8 }} maxWidth=\"md\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            align=\"center\"\n            color=\"#fff\"\n            gutterBottom\n          >\n            Information\n          </Typography>\n          <h1>Testnet Information</h1>\n          <p>\n            Welcome to our testnet platform! Before using our site, it is\n            crucial that you understand the implications of interacting with\n            testnet assets and games.\n          </p>\n          <h2>What is a testnet?</h2>\n          <p>\n            A testnet is a parallel network used for testing and development\n            purposes. It mimics the main blockchain network (mainnet) but uses\n            test tokens and assets, which have no real-world value. This allows\n            developers and users to experiment with new features, games, and\n            NFTs without risking actual assets.\n          </p>\n          <h2>Testnet assets and games</h2>\n          <p>\n            Please note that all NFTs and games on our platform are currently\n            running on the testnet. This means that:\n          </p>\n          <ol>\n            <li>\n              <p>\n                <strong>No real value:</strong> The NFTs and tokens you acquire\n                on the testnet have no real-world value. Do NOT trade real\n                tokens or assets for testnet NFTs or tokens.\n              </p>\n            </li>\n            <li>\n              <p>\n                <strong>Ownership reset:</strong> Ownership of all testnet NFTs\n                and tokens will be reset according to specific snapshots once we\n                migrate to the mainnet. This means that any testnet assets you\n                acquire will not be carried over to the mainnet.\n              </p>\n            </li>\n            <li>\n              <p>\n                <strong>Snapshot information:</strong> To learn more about the\n                snapshots, please refer to our{\" \"}\n                <a href=\"https://iotabots.io/faq\" target=\"_new\">\n                  IOTABOTS FAQ\n                </a>\n                .\n              </p>\n            </li>\n          </ol>\n          <h2>Stay informed</h2>\n          <p>\n            It's essential to stay informed about our platform updates,\n            especially concerning the migration from testnet to mainnet. We\n            recommend regularly checking our{\" \"}\n            <a href=\"https://docs.iotabots.io/blog/\" target=\"_new\">\n              Announcements\n            </a>{\" \"}\n            page and subscribing to our newsletter for the latest information.\n          </p>\n          <p>\n            Thank you for participating in our testnet, and we appreciate your\n            understanding and support as we work towards launching on the\n            mainnet!\n          </p>\n          <p>And Have Fun! 🤖</p>\n        </Container>\n      </main>\n    </>\n  );\n}\n","import { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { Routes, Route } from \"react-router-dom\";\n\nimport Navigation from './components/Navigation'\nimport Footer from './components/Footer'\nimport TestnetWarningBanner from './components/TestnetWarningBanner'\n\nimport Home from './pages/Home'\nimport Games from './pages/Games'\nimport Spacebots from './pages/Spacebots'\nimport Soonabots from './pages/Soonabots'\nimport Profile from './pages/Profile'\nimport Info from './pages/Info'\n\nimport './App.css';\n\nimport { Web3ReactProvider } from '@web3-react/core'\nimport Web3 from 'web3'\n\nfunction getLibrary(provider: any) {\n  return new Web3(provider)\n}\n\n\nexport default function App() {\n\n  const theme = createTheme({\n    typography: {\n      fontFamily: 'coder',\n    },\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#2b2b2b',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <ThemeProvider theme={theme}>\n        <Navigation />\n        <TestnetWarningBanner />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"games\" element={<Games />} />\n          <Route path=\"spacebots\" element={<Spacebots />} />\n          <Route path=\"soonabots\" element={<Soonabots />} />\n          <Route path=\"profile\" element={<Profile />} />\n          <Route path=\"info\" element={<Info />} />\n        </Routes>\n        <Footer />\n      </ThemeProvider>\n    </Web3ReactProvider>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}